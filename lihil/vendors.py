from typing import (
    Any,
    AsyncContextManager,
    AsyncGenerator,
    Iterator,
    Mapping,
    Protocol,
    Unpack,
)

from starlette.datastructures import URL as URL
from starlette.datastructures import FormData as FormData
from starlette.datastructures import Headers as Headers
from starlette.datastructures import QueryParams as QueryParams
from starlette.datastructures import UploadFile as UploadFile
from starlette.datastructures import Address as Address
from starlette.requests import Request as Request
from starlette.requests import cookie_parser as cookie_parser
from starlette.responses import Response as Response
from starlette.types import Lifespan as Lifespan
from starlette.types import Receive as IReceive
from starlette.types import Scope as IScope
from starlette.websockets import WebSocket as WebSocket

try:
    from starlette.testclient import TestClient as TestClient
except (ImportError, RuntimeError):
    pass


from ididi import use as ididi_use
from ididi.interfaces import INodeConfig, INodeFactory


def use[**P, T](func: INodeFactory[P, T], **iconfig: Unpack[INodeConfig]):
    if iconfig.get("reuse") is None:
        iconfig["reuse"] = False
    return ididi_use(func, **iconfig)


class IRequest(Protocol):
    def __init__(self, scope: IScope, receive: IReceive | None = None) -> None: ...
    def __getitem__(self, key: str) -> Any: ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...
    def __eq__(self, value: object) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def url(self) -> URL: ...
    @property
    def base_url(self) -> URL: ...
    @property
    def headers(self) -> Mapping[str, str]: ...
    @property
    def query_params(self) -> Mapping[str, str]: ...
    @property
    def path_params(self) -> Mapping[str, Any]: ...
    @property
    def cookies(self) -> Mapping[str, str]: ...
    @property
    def client(self) -> Address | None: ...
    @property
    def session(self) -> Mapping[str, Any]: ...
    @property
    def auth(self) -> Any: ...
    @property
    def user(self) -> Any: ...
    @property
    def state(self) -> dict[str, Any]: ...
    def url_for(self, name: str, /, **path_params: Any) -> URL: ...
    @property
    def method(self): ...
    @property
    def receive(self) -> IReceive: ...
    async def stream(self) -> AsyncGenerator[bytes, None]: ...
    async def body(self) -> bytes: ...
    async def json(self) -> Any: ...
    def form(
        self,
        *,
        max_files: int | float = 1000,
        max_fields: int | float = 1000,
        max_part_size: int = 1024 * 1024,
    ) -> AsyncContextManager[FormData]: ...
    async def close(self) -> None: ...
    async def is_disconnected(self) -> bool: ...
    async def send_push_promise(self, path: str) -> None: ...
